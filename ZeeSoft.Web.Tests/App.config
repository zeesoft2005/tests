<?xml version="1.0" encoding="utf-8"?>
<configuration>
 
  <system.diagnostics>
    <sharedListeners>
      <add name="xml" type="System.Diagnostics.XmlWriterTraceListener" initializeData="HelloLogging.svclog" />
      <add name="color" type="Essential.Diagnostics.ColoredConsoleTraceListener, Essential.Diagnostics.ColoredConsoleTraceListener" template="{DateTime:HH':'mm':'ssZ} [{Thread}]({Thread}) {EventType} {Source} {Id}: {Message}{Data}" convertWriteToEvent="true" />
      
    <add name="example-filelog" type="Microsoft.VisualBasic.Logging.FileLogTraceListener, Microsoft.VisualBasic, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" traceOutputOptions="DateTime,ThreadId,LogicalOperationStack" autoFlush="true" customLocation="C:\Temp\Logs" location="Custom" logFileCreationSchedule="Daily" maxFileSize="5000000" reserveDiskSpace="10000000">
        <!--
          Writes to a rolling text file. You need to specify the version of the library corresponding to the .NET Framework you have installed, and make sure the customLocation exists.
        -->
      </add>
      <add name="console" type="System.Diagnostics.ConsoleTraceListener" traceOutputOptions="DateTime">
        <!--
          Writes to the console output or error stream.        
          Outputs Source, EventType, Id, and Message, plus traceOutputOptions.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=ConsoleTraceListener
        -->
      </add>
      <add name="eventlog" type="System.Diagnostics.EventLogTraceListener" initializeData="Diagnostics.Sample">
        <!--
          Writes to the Windows Event Log.
          Note: You must include an installer (that is run by an administrator)
          to create a the event log source (specified in initializeData).
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=EventLogTraceListener
  		  -->
        <filter type="System.Diagnostics.EventTypeFilter" initializeData="Warning" />
      </add>
      <add name="events" type="System.Diagnostics.EventSchemaTraceListener, System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" initializeData="TraceOutput.xml" traceOutputOptions="ProcessId,DateTime" logRetentionOption="LimitedCircularFiles" maximumNumberOfFiles="9" maximumFileSize="1048576" bufferSize="65536">
        <!--
          Writers XML fragments to a file using the Event schema.        
          Note: Although Service Trace Viewer can import (and convert to .svclog),
          it loses important information including the actual trace message.
          See: http://msdn.microsoft.com/en-us/library/system.diagnostics.eventschematracelistener.aspx
        -->
      </add>
      <add name="filelog" type="Microsoft.VisualBasic.Logging.FileLogTraceListener, Microsoft.VisualBasic, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" traceOutputOptions="DateTime,ThreadId" autoFlush="true" customLocation="C:\Temp\Logs" location="Custom" logFileCreationSchedule="Daily" maxFileSize="5000000" reserveDiskSpace="10000000">
        <!--
          Writes to a rolling text file
          You may need to specify the version of Visual Basic you have installed,
          and make sure the customLocation exists.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=FileLogTraceListener
        -->
      </add>
      <add name="xmlwriter" type="System.Diagnostics.XmlWriterTraceListener" initializeData="C:\Temp\Logs\Trace.svclog">
        <!--
          Writes E2ETraceEvent XML fragments to a file, suitable 
          for viewing using the Service Trace Viewer tool (SvcTraceViewer.exe).
          Usually used for WCF tracing, including correlation across tiers.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=XmlWriterTraceListener
        -->
      </add>
      <add name="rollingfile" type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics.RollingFileTraceListener" initializeData="C:\Temp\Logs\{ApplicationName}-{DateTime:yyyy-MM-dd}.log" template="{DateTime:u} - {EventType} {Source} {Id}: {Message}{Data}" convertWriteToEvent="true">
        <!--
          Writes to a text file, rolling to a new file based on a filename template 
          (usually including the date).
          
          Options:
            initializeData="{ApplicationName}-{DateTime:yyyy-MM-dd}.log"
            convertWriteToEvent="true|false" 
            template="{DateTime:u} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}"
  
          Children:
            <filter 
              type="Essential.Diagnostics.ExpressionFilter, Essential.Diagnostics.Core"
              initializeData=' Id >= 8000 ' />
        -->
      </add>
    <add name="sqldatabase" type="Essential.Diagnostics.SqlDatabaseTraceListener, Essential.Diagnostics.SqlDatabaseTraceListener"
         initializeData="EMSConn" 
         applicationName="SQLTraceSourceTest">
        <!--
          Trace listener that writes to the database connection specified into a
          table created by the diagnostics_regsql.exe tool (in the package tools directory).

          Options:
            initializeData="connection string name"
            applicationName="application name"
            commandText="SQL command"
            maxMessageLength="1500"
  
          Children:
            <filter 
              type="Essential.Diagnostics.ExpressionFilter, Essential.Diagnostics.Core"
              initializeData=' Id >= 8000 ' />
         -->
      </add></sharedListeners>
    <sources>
      <source name="HelloConsole" switchValue="All">
        <listeners>
          <clear />
          <!--<add name="console" type="System.Diagnostics.ConsoleTraceListener" />-->
          <add name="color" />
          <!--<add name="eventlog" />-->

        </listeners>
      </source>
      <source name="HelloXML" switchValue="Information,ActivityTracing">
        <listeners>
          <clear />
          <add name="xml" />
        </listeners>
      </source>
    <source name="fileSource" switchValue="All">
        <!--
          Add listener to source. Use named switches for multiple sources; switch values can be names, decimal, or hexadecimal.
        -->
        <listeners>
          <clear />
          <add name="example-filelog" />
        </listeners>
      </source>
      <source name="System.ServiceModel" switchValue="Information, ActivityTracing" propagateActivity="true">
        <!-- 
          Windows Communication Framework (WCF)
          Including propogation of activity correlation across tiers.
          See: http://msdn.microsoft.com/en-us/library/ms730064.aspx
        -->
        <listeners>
          <clear />
        </listeners>
      </source>
      <source name="System.ServiceModel.MessageLogging">
        <listeners>
          <clear />
        </listeners>
      </source>
      <source name="Microsoft.IdentityModel" switchValue="Off">
        <!-- 
          Windows Identity Foundation (WIF)
          See: http://msdn.microsoft.com/en-us/library/ee517282.aspx 
        -->
      </source>
      <source name="CardSpace" switchValue="Off">
        <!-- 
          Other .NET Framework Sources, e.g. For diagnosing email use System.Net and System.Net.Sockets.
          See: http://msdn.microsoft.com/en-us/library/ms733025.aspx 
        -->
      </source>
      <source name="System.IO.Log" switchValue="Off" /><source name="System.Net" switchValue="Off" /><source name="System.Net.Sockets" switchValue="Off" /><source name="System.Runtime.Serialization" switchValue="Off" />
      <source name="RollingFileSource" switchValue="All">
        <!--
          Add listener to source. Use named switches for multiple sources; switch values can be names, decimal, or hexadecimal.
        -->
        <listeners>
          <clear />
          <add name="rollingfile" />
        </listeners>
      </source>
    
    <source name="SQLTraceSource" switchValue="All">
        <!--
          Add listener to source. Use named switches for multiple sources; switch values can be names, decimal, or hexadecimal.
        -->
        <listeners>
          <clear />
          <add name="sqldatabase" />
        </listeners>
      </source></sources>
  <trace autoflush="true" indentsize="0">
      <listeners>
        <!--
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        -->
        <!--
          Legacy Trace.Write() statements (not using a TraceSource).
          Turn indent off to avoid confusion for multithreaded traces,
          and clear the default listener for performance.
        --><!--
          Also add listener for legacy Trace.Write() statements (not using a TraceSource).
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        --><!--
          Also add listener for legacy Trace.Write() statements (not using a TraceSource).
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        --><clear />
      <add name="rollingfile" /><add name="sqldatabase" /></listeners>
    </trace><switches>
      <!--
        Specify switchName (instead of switchValue) to use the same
        switch for multiple sources.
        Values can either be SourceLevels name values, decimal,
        or hexadecimal.
        -->
      <add name="SourceSwitch1" value="None,Critical,Error,Warning,Information,Verbose,ActivityTracing,All" />
      <add name="SourceSwitch2" value="0,1,3,7,15,31,0xFF00,0xFFFF" />
    </switches></system.diagnostics>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6" />
    </startup>
<system.serviceModel>
    <diagnostics>
      <messageLogging logEntireMessage="true" logMalformedMessages="false" logMessagesAtServiceLevel="true" logMessagesAtTransportLevel="false" maxMessagesToLog="3000" maxSizeOfMessageToLog="2000">
        <!-- 
          Windows Communication Framework (WCF)
          For message logging need to also turn on diagnostics in WCF.
          See: http://msdn.microsoft.com/en-us/library/ms730064.aspx
        -->
      </messageLogging>
    </diagnostics>
  </system.serviceModel>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Essential.Diagnostics.Core" publicKeyToken="9d041bca93991466" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.2.0.0" newVersion="2.2.0.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
<connectionStrings>    
    <add name="EMSConn" providerName="System.Data.SqlClient" 
         connectionString="server=.;database=EMS;Integrated Security=SSPI">
      <!--
        For SqlDatabaseTraceListener use the tool installed in the tools directory by Nuget 
        to install the default database on the local SQL instance, using Windows credentials:
        .\diagnostics_regsql.exe -E -AD
      -->
    </add>
  </connectionStrings></configuration>